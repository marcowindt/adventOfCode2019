OP_CODE = [
    3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1101, 78, 5, 225, 1, 166, 139, 224, 101, -74, 224, 224, 4, 224,
    1002, 223, 8, 223, 1001, 224, 6, 224, 1, 223, 224, 223, 1002, 136, 18, 224, 101, -918, 224, 224, 4, 224, 1002, 223,
    8, 223, 101, 2, 224, 224, 1, 224, 223, 223, 1001, 83, 84, 224, 1001, 224, -139, 224, 4, 224, 102, 8, 223, 223, 101,
    3, 224, 224, 1, 224, 223, 223, 1102, 55, 20, 225, 1101, 53, 94, 225, 2, 217, 87, 224, 1001, 224, -2120, 224, 4, 224,
    1002, 223, 8, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 102, 37, 14, 224, 101, -185, 224, 224, 4, 224, 1002, 223, 8,
    223, 1001, 224, 1, 224, 1, 224, 223, 223, 1101, 8, 51, 225, 1102, 46, 15, 225, 1102, 88, 87, 224, 1001, 224, -7656,
    224, 4, 224, 102, 8, 223, 223, 101, 7, 224, 224, 1, 223, 224, 223, 1101, 29, 28, 225, 1101, 58, 43, 224, 1001, 224,
    -101, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 6, 224, 1, 224, 223, 223, 1101, 93, 54, 225, 101, 40, 191, 224,
    1001, 224, -133, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 223, 224, 223, 1101, 40, 79, 225, 4, 223, 99,
    0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999,
    1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105,
    1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300,
    1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1008, 226, 677, 224, 1002, 223, 2,
    223, 1005, 224, 329, 1001, 223, 1, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 344, 1001, 223, 1, 223,
    8, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 359, 1001, 223, 1, 223, 1108, 226, 677, 224, 1002, 223, 2, 223,
    1006, 224, 374, 101, 1, 223, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 389, 1001, 223, 1, 223, 8, 226,
    677, 224, 102, 2, 223, 223, 1006, 224, 404, 101, 1, 223, 223, 1007, 226, 226, 224, 1002, 223, 2, 223, 1006, 224,
    419, 101, 1, 223, 223, 107, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 434, 1001, 223, 1, 223, 1007, 226, 677,
    224, 102, 2, 223, 223, 1005, 224, 449, 101, 1, 223, 223, 1107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 464,
    1001, 223, 1, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 479, 101, 1, 223, 223, 108, 226, 226, 224, 1002,
    223, 2, 223, 1006, 224, 494, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 509, 1001, 223, 1,
    223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 524, 101, 1, 223, 223, 1107, 677, 226, 224, 102, 2, 223,
    223, 1006, 224, 539, 1001, 223, 1, 223, 108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 554, 1001, 223, 1, 223,
    1108, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 569, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1005,
    224, 584, 1001, 223, 1, 223, 7, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 599, 101, 1, 223, 223, 1108, 226, 226,
    224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 629,
    101, 1, 223, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 644, 1001, 223, 1, 223, 7, 226, 677, 224, 102, 2,
    223, 223, 1005, 224, 659, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 674, 101, 1, 223, 223,
    4, 223, 99, 226
]

EXAMPLE = [3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8]


def compute(op_code: list):
    at = 0

    while op_code[at] != 99:
        operator = str(op_code[at])
        operator = [int(x) for x in operator.zfill(5)]

        # print(operator)
        # print(op_code)

        if operator[-1] in [1, 2, 5, 6, 7, 8]:
            if operator[2] == 0:
                first_value = op_code[op_code[at + 1]]
            else:
                first_value = op_code[at + 1]

            if operator[1] == 0:
                second_value = op_code[op_code[at + 2]]
            else:
                second_value = op_code[at + 2]
        else:
            first_value, second_value = 0, 0

        if operator[-1] == 1:
            op_code[op_code[at + 3]] = first_value + second_value
            at += 4
        elif operator[-1] == 2:
            op_code[op_code[at + 3]] = first_value * second_value
            at += 4
        elif operator[-1] == 3:
            # input
            ins = input("Please specify your input and press enter: ")
            op_code[op_code[at + 1]] = int(ins)
            at += 2
        elif operator[-1] == 4:
            # output
            if operator[2] == 1:
                print(op_code[at + 1])
            else:
                print(op_code[op_code[at + 1]])
            at += 2
        elif operator[-1] == 5:
            # jump if true
            if first_value != 0:
                at = second_value
            else:
                at += 3
        elif operator[-1] == 6:
            # jump if false
            if first_value == 0:
                at = second_value
            else:
                at += 3
        elif operator[-1] == 7:
            if operator[0] == 0:
                third_value = op_code[at + 3]
            else:
                third_value = at + 3
            # less than
            if first_value < second_value:
                op_code[third_value] = 1
            else:
                op_code[third_value] = 0
            at += 4
        elif operator[-1] == 8:
            if operator[0] == 0:
                third_value = op_code[at + 3]
            else:
                third_value = at + 3
            # equals
            if first_value == second_value:
                op_code[third_value] = 1
            else:
                op_code[third_value] = 0
            at += 4

    return op_code


if __name__ == "__main__":
    # Part 1 & 2
    compute(OP_CODE.copy())
